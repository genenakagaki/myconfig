#+PROPERTY: header-args :tangle ~/myconfig/emacs/org-mode/config.el

* Org Mode
#+begin_src emacs-lisp :results none
  (use-package org)
  (require 'org-id)
#+end_src

** Screen
#+begin_src emacs-lisp :results none
  (setq org-return-follows-link t)

  (use-package valign)

  (add-hook 'org-mode-hook (lambda ()
                             ;; make the lines in the buffer wrap around the edges of the screen.
                             (valign-mode)
                             (org-indent-mode)))
#+end_src

** Keybindings
#+begin_src emacs-lisp :results none
  (gn/leader-nvmap org-mode-map
    "e" 'org-ctrl-c-ctrl-c
    "bb" 'gnorg/open-scope
    )

  (gn/leader-nmap org-mode-map
    "i" '(:ignore i :which-key "insert")
    "id" '(:ignore id :which-key "date")
    "id SPC" 'org-time-stamp
    "idi" 'org-time-stamp-inactive
    "idd" 'org-deadline
    "ids" 'org-schedule
    "il" 'org-insert-link
    "ii" 'org-id-get-create
    "ib" '(org-insert-structure-template :which-key "insert code block")
    "it" 'counsel-org-tag
    "iT" 'gnorg/insert-template
    "D" 'org-cut-subtree
    "y" '(:ignore y :which-key "yank")
    "yi" 'org-id-copy
    "yl" 'org-store-link
    "t" '(:ignore t :which-key "todo")
    "t SPC" 'org-todo
    "tn" 'gntodo/next-todo
    "tp" 'org-priority
    "T" '(:ignore T :which-key "toggle") 
    "Ti" 'org-toggle-inline-images
    "Tl" 'org-toggle-link-display
    "s" '(:ignore s :which-key "src")
    "st" 'org-babel-tangle
    "n" '(:ignore n :which-key "narrowing")
    "nn" 'org-narrow-to-subtree
    "nw" 'widen
    "/" 'org-sparse-tree
    )

  (general-define-key
   :states '(normal visual insert)
   :keymaps 'org-mode-map
   "C-<return>" 'gnorg/insert-new-item
   "C-h" 'gnorg/promote-tree
   "C-S-h" 'gnorg/promote
   "C-j" 'gnorg/move-tree-down
   "C-k" 'gnorg/move-tree-up
   "C-l" 'gnorg/demote-tree
   "C-S-l" 'gnorg/demote
   )

  (general-nvmap
    :keymaps 'org-mode-map
    "J" 'org-next-visible-heading
    "K" 'org-previous-visible-heading)
#+end_src

   
** Movement
#+begin_src emacs-lisp :results none
  (define-minor-mode gnorg/movement-mode
    "Minor mode for org movements"
    :lighter " gnorg/movement"
    )

  ;(general-nvmap org-mode-map
  ;  "C-k" 'org-previous-visible-heading
  ;  "C-j" 'org-next-visible-heading
  ;  )
#+end_src

** Editing
#+begin_src emacs-lisp :results none
      (defun gnorg/insert-new-item ()
        "Inserts a new item (headings, checkboxes, or bullets)"
        (interactive)
        (evil-append-line 0)
        (cond ((org-at-heading-p) (org-insert-heading-respect-content)) 
              ((org-at-item-checkbox-p) (org-insert-todo-heading nil))
              ((org-at-item-p) (org-insert-item))))

      (defun gnorg/promote ()
        "Moves item position (headings, checkboxes, or bullets)"
        (interactive)
        (cond ((org-at-heading-p) (org-do-promote))
              ((org-at-item-p) (org-outdent-item))))

      (defun gnorg/promote-tree ()
        "Moves item position (headings, checkboxes, or bullets)"
        (interactive)
        (cond ((org-at-heading-p) (org-promote-subtree))
              ((org-at-item-p) (org-outdent-item-tree))))

      (defun gnorg/demote ()
        "Demotes item (headings, lists)"
        (interactive)
        (cond ((org-at-heading-p) (org-do-demote))
              ((org-at-item-p) (org-indent-item))))

      (defun gnorg/demote-tree ()
        "Demotes item (headings, lists)"
        (interactive)
        (cond ((org-at-heading-p) (org-demote-subtree))
              ((org-at-item-p) (org-indent-item-tree))))

      (defun gnorg/demote-tree ()
        "Demotes item (headings, lists)"
        (interactive)
        (cond ((org-at-heading-p) (org-demote-subtree))
              ((org-at-item-p) (org-indent-item-tree))))

      (defun gnorg/move-tree-up ()
        "Moves item up (headings, lists)"
        (interactive)
        (cond ((org-at-heading-p) (org-move-subtree-up))
              ((org-at-item-p) (org-move-item-up))))

      (defun gnorg/move-tree-down ()
        "Moves item down (headings, lists)"
        (interactive)
        (cond ((org-at-heading-p) (org-move-subtree-down))
              ((org-at-item-p) (org-move-item-down))))

      (defun gnorg/open-scope ()
        "Open subtree or block in new buffer"
        (interactive)
        (cond ((org-in-src-block-p) (org-edit-special))
              ((org-at-heading-p) (org-tree-to-indirect-buffer))))

#+end_src
    
** Todo

*** Priority
#+begin_src emacs-lisp :results none
  (setq org-priority-faces '((?A . (:foreground "red" :weight "bold"))
                             (?B . (:foreground "orange"))
                             (?C . (:foreground "yellow"))))
#+end_src

** Notification
#+begin_src emacs-lisp :results none
  (use-package alert)

  (alert "this is an alert")

  (notifications-notify :title "hello")
#+end_src


** MyTodo
The problem I am facing
#+begin_src emacs-lisp :results none
  (defvar gntodo/inbox-path "~/mytodo/inbox.org"
    "Path to the inbox file")

  (defvar gntodo/tasks-path "~/mytodo/tasks.org"
    "Path to the tasks file")

  (defvar gntodo/reference-path "~/mytodo/reference.org"
    "Path to the reference file")

  (defvar gntodo/incubator-path "~/mytodo/incubator.org"
    "Path to the incubator file")

  (defun gntodo/open-tasks ()
    "Open tasks file."
    (interactive)
    (find-file gntodo/tasks-path))

  (defun gntodo/open-inbox ()
    "Open inbox file."
    (interactive)
    (find-file gntodo/inbox-path))

  (defun gntodo/open-reference ()
    "Open reference file."
    (interactive)
    (find-file gntodo/reference-path))

  (setq org-todo-keywords
        '((sequence "TODO" "DOING" "|" "DONE")
          (sequence "ON-HOLD(o)" "SCHEDULED(s)" "WAITING(w)" "CANCELLED(c)")))

  (defun gntodo/next-todo-string (current-todo)
    "Returns next todo"
    (cond ((or (equal current-todo "TODO")
               (equal current-todo "ON-HOLD")
               (equal current-todo "SCHEDULED")
               (equal current-todo "WAITING"))
           "DOING")
          ((equal current-todo "DOING")
           "DONE")))

  (defun gntodo/current-todo-string ()
    (if (org-entry-is-todo-p)
        (-> (org-get-todo-state)
            substring-no-properties)
      nil))

  (defun gntodo/next-todo ()
    "Toggle TODO states"
    (interactive)
    (org-todo (if (org-entry-is-todo-p) 
                  (gntodo/next-todo-string (gntodo/current-todo-string))
                "TODO"))
    (if (equal (gntodo/current-todo-string) "DOING")
        (org-clock-in)
      (org-clock-out)))
#+end_src

*** Capture
#+begin_src plantuml :tangle no :file todo-capture.png
  @startuml
  title Capture

  start
  split
          :check email;
  split again
          :check chat;
  end split
  :store in **inbox**
  - new tasks
  - interesting information;
  stop
  @enduml
#+end_src

#+begin_src emacs-lisp :results none
  (setq org-capture-templates
        '(("i" "Inbox" entry (file gntodo/inbox-path)
           "* %?")
          ))

  (setq org-refile-use-outline-path 'file)

  (setq org-refile-targets
        '((gntodo/inbox-path :level . 0)
          (gntodo/tasks-path :level . 0)
          (gntodo/reference-path :level . 0)
          (gntodo/incubator-path :level . 0)))

  (general-nmap org-capture-mode-map
    [remap save-buffer] 'org-capture-finalize
    [remap kill-current-buffer] 'org-capture-kill)
#+end_src

*** Process Inbox Item
#+begin_src plantuml :tangle no :file mytodo-process-inbox-item.png
#+end_src

**** Clarify
#+begin_src emacs-lisp :results none
(defun gntodo/add-todo (todo-name)
    ""
    (save-excursion
      (org-insert-todo-heading-respect-content)
      (gnorg/demote)
      (insert todo-name)
      ))

  (defun gntodo/clarify-project-issue ()
    "Clarify project_issue task type"
    (org-set-tags "project_issue")
    (if (y-or-n-p "Can you delegate it?")
        (progn (org-set-tags "delegate")
               (gntodo/add-todo "Write down delegatee")
               (gntodo/add-todo "Delegate task"))
      (gntodo/add-todo "Plan task"))
    (gnorg/insert-heading-content "Why this issue needs to be addressed:
  - "))

  (defun gntodo/clarify-meeting ()
    "Clarify meeting task type"
    (org-set-tags "meeting")
    (gntodo/add-todo "Prepare for meeting")
    (gnorg/insert-heading-content "What this meeting is about:
  - "))

  (defun gntodo/clarify-reference ()
    "Clarify reference task type"
    (org-set-tags "reference")
    (gntodo/add-todo "Organize reference")
    (gntodo/add-todo "Add entry to reference file")
    (gnorg/insert-heading-content "Why this reference is needed:
  - "))

  (defun gntodo/clarify-future-project ()
    "Clarify future_project task type"
    (org-set-tags "future_project")
    (gntodo/add-todo "Write down project idea")
    (gntodo/add-todo "Add entry to incubator file")
    (gnorg/insert-heading-content "How this might be a future project:
  - "))

  (defun gntodo/clarify-other ()
    "Clarify other task type"
    (gnorg/insert-heading-content))


  (defvar gntodo/project-issue-task-type
    '(tag-name "project_issue"
              clarify-function gntodo/clarify-project-issue))
  (defvar gntodo/meeting-task-type
    '(tag-name "meeting"
              clarify-function gntodo/clarify-meeting))
  (defvar gntodo/reference-task-type
    '(tag-name "reference"
              clarify-function gntodo/clarify-reference))
  (defvar gntodo/future-project-task-type
    '(tag-name "future_project"
              clarify-function gntodo/clarify-future-project))
  (defvar gntodo/other-task-type
    '(tag-name "other"
              clarify-function gntodo/clarify-other))

  (defvar gntodo/task-type
    '(gntodo/project-issue-task-type
      gntodo/meeting-task-type
      gntodo/reference-task-type
      gntodo/future-project-task-type
      gntodo/other-task-type))

  (defun gntodo/clarify-inbox-item ()
    "Clarify item"
    (interactive)
    (when (not (org-on-heading-p))
      (error "You need to be on a heading to Clarify an item."))

    (if (y-or-n-p "Is item a task you can complete in 2 min?")
        (message "DO IT NOW!")
      (progn
        (when (y-or-n-p "Is item related to a project?")
          (org-set-tags-command))
        (->> gntodo/task-type
             (--map (plist-get it 'tag-name))
             (ivy-read "Choose type of item: ") 
             ((lambda (chosen-tag-name) 
                (-> gntodo/task-type
                    (->> (--first (string= chosen-tag-name (plist-get it 'tag-name))))
                    (plist-get 'clarify-function)
                    (funcall)
                    ))))))
    (widen))

  (defun gnorg/insert-heading-content (content)
    "Insert content under heading"
    (when (not (org-on-heading-p))
      (error "You need to be on a heading for this command."))
    (move-end-of-line 1)
    (insert (concat "\n" content)))

  (defun gnorg/insert-subheading (heading-name)
    "Insert subheading under current heading"
    (interactive)
    (when (not (org-on-heading-p))
      (error "You need to be on a heading for this command."))
    (org-narrow-to-subtree)
    (let ((current-level (org-current-level)))
      (goto-char (point-max))
      (-> (+ current-level 1)
          (-repeat "*")
          (->> (--reduce (format "%s%s" acc it)))
          ((lambda (subheading-stars) (concat "\n" subheading-stars " " heading-name)))
          (insert)))
    (widen))


  (defun gnorg/goto-toplevel-heading ()
    "Go to toplevel heading"
    (interactive)
    (outline-heading 100))
#+end_src

**** Organize
#+begin_src emacs-lisp :results none
#+end_src

*** Plan
#+begin_src plantuml :tangle no :file mytodo-plan.png 
  @startuml
  title Plan
  start

  if (priority A exists?) then (no)
          if (priority B exists?) then (no)
                  if (priority C exists?) then (no)
                          :get all todos without priority;
                  else (yes)
                          :get all priority C todos;
                  endif
          else (yes)
                  :get all priority B todos;
          endif
  else (yes)
          :get all priority A todos;
  endif
  :get todo with latest due date;
  stop
  @enduml
#+end_src

#+begin_src emacs-lisp :results none
  (defun gntodo/current-task ()
    "Show current task"
    (interactive)
    (let ((current-task-point (gntodo/current-task-point)))
      (if (numberp current-task-point)
          (progn (gntodo/open-tasks)
                 (goto-char current-task-point)
                 (org-narrow-to-subtree))
        (error "Current task not found."))))

  (defun gntodo/current-task-point ()
    "Returns point of current task"
    (save-window-excursion
      (gntodo/open-tasks)
      (widen)
      (goto-char (point-min))
      (search-forward-regexp "^\* DOING " nil t)
      (beginning-of-line)
      (if (eq (point) (point-min))
          nil
        (point))))

  (defun gntodo/next-task ()
    "Set next task as doing"
    (interactive)
    (gntodo/open-inbox)
    (goto-char (point-min))
    (search-forward-regexp "^\* ")
    )
#+end_src

** Agenda
#+begin_src emacs-lisp :results none
  (evil-set-initial-state 'org-agenda-mode 'normal)

  (setq org-agenda-files '("~/mytodo/tasks.org"))
  (setq org-agenda-log-mode-items '(state))
#+end_src

** Source Mode
#+begin_src emacs-lisp :results none
      (general-nmap org-src-mode-map
        [remap save-buffer] 'org-edit-src-exit
        [remap kill-current-buffer] 'org-edit-src-abort)

      ;; Don't confirm when evaluating src blocks
      (setq org-confirm-babel-evaluate nil)

#+end_src
** Template
#+begin_src emacs-lisp :results none
       (defvar gnorg/template-path "~/mytodo/templates.org")

       (defun gnorg/template ()
         ""
         (with-temp-buffer
           (insert-file-contents gnorg/template-path)
           (org-mode)
           (org-element-parse-buffer)))

       (defun gnorg/template-headlines (max-headline-level)
         "Get org template headlines

       MAX-HEADLINE-LEVEL is an integer that specifies how deep to search headlines"
         (org-element-map (gnorg/template) 'headline
           (lambda (h)
             (when (<= (org-element-property :level h)
                       max-headline-level)
               h))))

       (defvar gnorg/max-headline-level 2)

       (defun gnorg/insert-template ()
         (interactive)
         (let ((headlines (gnorg/template-headlines gnorg/max-headline-level)))
           (->> headlines
                (-map (lambda
                        (headline)
                        (org-element-property :raw-value headline)))
                (completing-read "Select a template: ")
                ((lambda (headline-raw-value)
                   (-first (lambda
                             (headline)
                             (string= headline-raw-value
                                      (org-element-property :raw-value headline)))
                           headlines)))
                (org-element-interpret-data)
                ((lambda (headline)
                   (save-excursion (insert headline)))))
           )
         )
#+end_src
** Org HTML Export
#+begin_src emacs-lisp :results none
  (require 'ox-html)

  (org-export-define-derived-backend 'gn-blog-post-vue 'html
    :options-alist '((:html_doctype "HTML_DOCTYPE" "HTML5" t)
                     (:html_container "HTML_CONTAINER" "div" t))
    :translate-alist '((template . gnorg/blog-post-template)))

                                          ;(org-publish-project "gn-publish" t)


                                          ;'(setq gn/test )
                                          ;'"./\\(?=.+?.\\(png\\|jpg\\)\\)" 
                                          ;'(replace-regexp-in-string "./\\(?=.+?png\\)" "something" "<img src='./tessting.png'")

  (defun gnorg/blog-post-template (contents info)
    "Template for org vue export"
    (concat
     "<template>\n"
     "<div>\n"
     contents
     "</div>\n"
     "</template>\n"
     "<script>\n"
     "export default {\n"
     (format "title: '%s',\n"
             (org-export-data (plist-get info :title) info))
     "meta: [\n"
     (format "{name: 'description', content: '%s'},"
             (org-export-data (plist-get info :description) info))
     "],\n"
     "}\n"
     "</script>\n"
     ))

  (defun gnorg/publish-as-blog-post
      (&optional async subtreep visible-only body-only ext-plist)
    (interactive)
    (org-export-to-buffer 'gn-blog-post-vue "*Org HTML Export*"
      async subtreep visible-only body-only ext-plist
      (lambda () (set-auto-mode t))))

  (defun gnorg/publish-blog-post-interactive
      (&optional async subtreep visible-only body-only ext-plist)
    (interactive)
    (unless (file-directory-p pub-dir)
      (make-directory pub-dir t))
    (let* ((extension ".vue")
           (file (org-export-output-file-name extension subtreep))
           (org-export-coding-system org-html-coding-system))
      (org-export-to-file 'gn-blog-post-vue file
        async subtreep visible-only body-only ext-plist)))

  (defun gnorg/publish-blog-post (plist filename pub-dir)
    (unless (file-directory-p pub-dir)
      (make-directory pub-dir t))
    (org-publish-org-to 'gn-blog-post-vue
                        filename
                        ".vue"
                        plist
                        pub-dir))

  (provide 'gn-blog-post-vue)

#+end_src
** TummyTracker
#+begin_src emacs-lisp :results none
  (org-export-define-derived-backend 'gn-tummytracker-entry 'html
    :options-alist '((:html_doctype "HTML_DOCTYPE" "HTML5" t)
                     (:html_container "HTML_CONTAINER" "div" t))
    :translate-alist '((template . gntummytracker/entry-template)))

  (defun gntummytracker/entry-template (contents info)
    "Template for org vue export"
    (concat
     "<template>\n"
     "<div>\n"
     contents
     "</div>\n"
     "</template>\n"
     "<script>\n"
     "export default {\n"
     "}\n"
     "</script>\n"
     ))

  (defun gntummytracker/publish-org-interactive
      (&optional async subtreep visible-only body-only ext-plist)
    (interactive)
    (unless (file-directory-p pub-dir)
      (make-directory pub-dir t))
    (let* ((extension ".vue")
           (file (org-export-output-file-name extension subtreep))
           (org-export-coding-system org-html-coding-system))
      (org-export-to-file 'gn-tummytracker-entry file
        async subtreep visible-only body-only ext-plist)))

  (defun gntummytracker/publish-org (plist filename pub-dir)
    (unless (file-directory-p pub-dir)
      (make-directory pub-dir t))
    (org-publish-org-to 'gn-tummytracker-entry
                        filename
                        ".vue"
                        plist
                        pub-dir))

  (provide 'gn-tummytracker-entry)
#+end_src

** Org HTML publishing
#+begin_src emacs-lisp :results none
  (setq org-publish-project-alist
        '(
          ("gn-publish" :components ("gn-publish-org" "gn-publish-static"))
          ("gn-publish-org"
           :base-directory "~/things/blog-posts/"
           :base-extension "org"
           :publishing-directory "~/things/web/pages/"
           :recursive t
           :publishing-function gnorg/publish-blog-post
           :headline-levels 4
           :auto-preamble t
           )
          ("gn-publish-static"
           :base-directory "~/things/blog-posts/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf"
           :publishing-directory "~/things/web/static/"
           :recursive t
           :publishing-function org-publish-attachment
           )

          ("gn-tummytracker-publish"
           :base-directory "~/tummytracker/entry/"
           :base-extension "org"
           :publishing-directory "~/tummytracker/app/src/pages/entry/"
           :recursive t
           :publishing-function gntummytracker/publish-org
           :headline-levels 4
           :auto-preamble t)
          ))
#+end_src


#+begin_src emacs-lisp :results none
#+end_src



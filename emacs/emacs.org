#+PROPERTY: header-args :tangle ~/.emacs.d/init.el

* Package Management
#+begin_src emacs-lisp :results none
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-always-demand t)

  (use-package dash)
#+end_src
    
* File Configuration
#+begin_src emacs-lisp :results none
  ;; Keep .emacs.d directory clean
  (setq no-littering-etc-directory
        (expand-file-name "config/" user-emacs-directory))
  (setq no-littering-var-directory
        (expand-file-name "data/" user-emacs-directory))

  (use-package no-littering
    :config 
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    (load custom-file t))

  (set-language-environment "Japanese")

  ;; Use UTF-8
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)

  ;; Autosave changed files
  (use-package super-save
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))

  ;; Undo and redo
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+end_src



* My Emacs Config
** Initial Setup
These have to be at the top of the init.el file
*** Keybindings
#+begin_src emacs-lisp :results none
    (use-package general
        :config
        (general-evil-setup))
#+end_src

** Keybindings


*** Evil
#+begin_src emacs-lisp :results none
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (use-package evil)
  (evil-mode 1)
  (setq evil-undo-system 'undo-tree)
#+end_src

*** Vim
#+begin_src emacs-lisp :results none
  ;; Vim keybindings
  (evil-define-key 'insert 'global
    (kbd "C-g") 'evil-normal-state)

  (defun gn/evil-scroll-down ()
    "Scroll down half screen and center screen"
    (interactive)
    (evil-scroll-down nil)
    (evil-scroll-line-to-center (line-number-at-pos)))

  (defun gn/evil-scroll-up ()
    "Scroll up half screen and center screen."
    (interactive)
    (evil-scroll-up nil)
    (evil-scroll-line-to-center (line-number-at-pos)))

  (general-nvmap
    "SPC" nil
    "TAB" nil
    "RET" nil

    ;; Always use visual motion
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line

    ;; Custom motion commands
    "H" 'evil-first-non-blank
    "J" 'gn/evil-scroll-down
    "K" 'gn/evil-scroll-up
    "L" 'evil-end-of-line
    )

  (general-nmap
    ;; Custom delete commands
    "d" (general-key-dispatch 'evil-delete
          "n" 'evil-join
          "j" (general-simulate-key ('evil-delete "gj"))
          "k" (general-simulate-key ('evil-delete "gk"))
          "H" (general-simulate-key ('evil-delete "^"))
          "J" (general-simulate-key ('evil-delete "C-d"))
          "K" (general-simulate-key ('evil-delete "C-u"))
          "L" (general-simulate-key ('evil-delete "$"))
          ))
  ;; `evil-delete' is not bound in `evil-visual-state-map' by default but
  ;; inherited from `evil-normal-state-map'
  ;; This keeps the default behavior in visual state
  (general-vmap "d" 'evil-delete)

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** Keybindings
#+begin_src emacs-lisp :results none
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (general-def
    "C-SPC" 'help-command)

  ;; File keybindings
  ;(general-nvmap
    ;"C-o" 'find-file
    ;"C-S-o" 'find-file-other-window
    ;)

  ;; leader keys
  (general-create-definer gn/leader-nvmap
    :states '(normal visual)
    :prefix "SPC"
    :keymaps 'override)

  (general-create-definer gn/leader-nmap
    :states 'normal
    :prefix "SPC"
    :keymaps 'override)

  (general-create-definer gn/leader-vmap
    :states 'visual
    :prefix "SPC"
    :keymaps 'override)


  (gn/leader-nmap
    ":" 'execute-extended-command

    ; Org commands
    "a" 'org-agenda
    "c" 'org-capture

    ; Buffer commands
    "b" '(:ignore b :which-key "buffer")
    "bs" 'save-buffer
    "bq" 'kill-current-buffer
    "bl" 'switch-to-buffer
    "bL" 'switch-to-buffer-other-window
    "bo" 'find-file
    "bO" 'find-file-other-window

    ; Window commands
    "q" 'evil-window-delete
    "Q" 'delete-other-windows
    "h" 'evil-window-left
    "H" 'evil-window-move-far-left
    "l" 'evil-window-right
    "L" 'evil-window-move-far-right
    "k" 'evil-window-up
    "K" 'evil-window-move-very-top
    "j" 'evil-window-down
    "J" 'evil-window-move-very-bottom

    ; Modes
    "m" '(:ignore m :which-key "modes")
    "mw" 'whitespace-mode

    "w" '(:ignore w :which-key "workflow")
    ;"wc" current-todo
    "wt" 'gn/workflow-open-todo
    "wi" 'gn/workflow-open-inbox
    "wr" 'gn/workflow-open-reference
    )

  (gn/leader-nmap emacs-lisp-mode-map
    "e" 'eval-defun)

  (gn/leader-vmap emacs-lisp-mode-map
    "e" 'eval-last-sexp)
#+end_src

** Screen
*** UI
#+begin_src emacs-lisp :results none
       (setq inhibit-startup-message t) ; Prevent launch message
       (menu-bar-mode -1) ; Disable the menu bar
       (tool-bar-mode -1) ; Disable the tool bar


#+end_src
*** Style
#+begin_src emacs-lisp :results none
       ;; Theme
       (use-package doom-themes
         :config
         (setq doom-themes-enable-bold t
               doom-themes-enable-italic t)
         (load-theme 'doom-one t)
         (doom-themes-org-config))

       (use-package rainbow-delimiters
         :hook (prog-mode . rainbow-delimiters-mode))
       (use-package paren
         :config
         (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
         (show-paren-mode 1))

       ;; Display available keybindings
       (use-package which-key
         :init (which-key-mode)
         :diminish which-key-mode
         :config
         (setq which-key-idle-delay 0.3))
#+end_src

** Autocomplete
Setup completion tool
#+begin_src emacs-lisp
     (use-package ivy
       :bind (:map ivy-minibuffer-map
                   ("TAB" . ivy-alt-done)
                   ("C-l" . ivy-alt-done)
                   ("C-j" . ivy-next-line)
                   ("C-k" . ivy-previous-line)
                   :map ivy-switch-buffer-map
                   ("C-k" . ivy-previous-line)
                   ("C-l" . ivy-done)
                   ("C-d" . ivy-switch-buffer-kill)
                   :map ivy-reverse-i-search-map
                   ("C-k" . ivy-previous-line)
                   ("C-d" . ivy-reverse-i-search-kill))
       :config
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq ivy-height 20)
       (ivy-mode t))

     (use-package counsel
       :after ivy
       :config
       (define-key (current-global-map) [remap execute-extended-command] 'counsel-M-x)
       (define-key (current-global-map) [remap find-file] 'counsel-find-file)
       (define-key (current-global-map) [remap describe-function] 'counsel-describe-function)
       (define-key (current-global-map) [remap describe-variable] 'counsel-describe-variable))
#+end_src

** Editor 
Prevent tabs when indenting
#+begin_src emacs-lisp :results none
     (setq-default indent-tabs-mode nil)

     (column-number-mode)
     (global-display-line-numbers-mode t)

     (dolist (mode '(org-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Modules
*** Emacs Helpers
#+begin_src emacs-lisp :results none
  (use-package command-log-mode
    :commands command-log-mode)
#+end_src

*** Org Mode
#+begin_src emacs-lisp :results none
  (org-babel-load-file "~/myconfig/emacs/org-mode/config.org")
#+end_src
*** Packages
**** PlantUML
#+begin_src emacs-lisp :results none
  (use-package plantuml-mode)

  (setq plantuml-jar-path "~/myconfig/emacs/plantuml.jar")
  (setq plantuml-default-exec-mode 'jar)
  (setq plantuml-output-type "png")
  (setq org-plantuml-jar-path (expand-file-name "~/myconfig/emacs/plantuml.jar"))
  ;; Make plantuml available in org mode 
  (add-to-list
   'org-src-lang-modes '("plantuml" . plantuml))

  ;; Need this to evaluate plantuml src block
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))

  (defun gn/preview-plantuml ()
    "Preview plantuml diagram"
    (interactive)
    (let ((preview-window (get-buffer-window plantuml-preview-buffer)))
      (when preview-window
        (quit-window nil preview-window)))
    (plantuml-preview 1))

  (gn/leader-nvmap 'plantuml-mode-map
   "e" 'gn/preview-plantuml)
#+end_src

**** Pomodoro
#+begin_src emacs-lisp :results none
      (use-package org-pomodoro)
#+end_src


**** Magit
#+begin_src emacs-lisp :results none
      (use-package magit
        :config
        ;; Close transient with ESC
        (general-def transient-map
          "<escape>" 'transient-quit-one)

        (gn/leader-nvmap
          "v" 'magit-status)
        )
#+end_src

    
    
    
     
    
    

    
    


    
    
    
    
    

*** Development
   
**** HTML/CSS
#+begin_src emacs-lisp :results none
      (use-package web-mode)
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (setq-default indent-tabs-mode nil)
      (setq web-mode-markup-indent-offset 2)

      (use-package vue-mode)
      (setq mmm-js-mode-enter-hook (lambda () (setq syntax-ppss-table nil)))
      (setq mmm-typescript-mode-enter-hook (lambda () (setq syntax-ppss-table nil)))
#+end_src

    
    
    
*** LaTex
#+begin_src emacs-lisp :results none
  (use-package latex-preview-pane)

  (latex-preivew-pane-enabled)
#+end_src
